# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rm0RfzNOdP3g93hjm4aW23wtRUeCM1fE
"""

!pip
install
pandas == 0.25
.0;
!pip
install
tqdm == 4.33
.0;

!pip
install
snorkel;
!pip
install
spacy;
!python - m
spacy
download
en_core_web_md;
!pip
install
spacy - lookup;
!pip
install
lemminflect;
!pip
install
pandas - profiling;

import spacy
from spacy.tokens import Doc, Span, Token
from spacy_lookup import Entity
from lemminflect import getAllInflectionsOOV
from spacy.matcher import Matcher
import en_core_web_md
import re
from snorkel.labeling import labeling_function, LabelModel, PandasLFApplier, LFAnalysis
from snorkel.preprocess import preprocessor
import io
import pandas as pd

pd.set_option('display.max_colwidth', 0)
import numpy as np
import itertools
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sn

from google.colab import files

training_data = files.upload()
validation_data = files.upload()

df_raw = pd.read_csv('train.csv')
df_raw['class'] = df_raw['class'].map(str.strip)  # some labels have a trailing space

df_train = df_raw[['unprocessed_text']].rename(columns={'unprocessed_text': 'text'})
df_labels = df_raw[['class']]

df_val_raw = pd.read_csv('validation.csv')
df_val_raw['class'] = df_val_raw['class'].map(str.strip)

df_val = df_val_raw[['unprocessed_text']].rename(columns={'unprocessed_text': 'text'})
df_val_labels = df_val_raw[['class']]

nlp = en_core_web_md.load()

ABSTAIN = -1
ABUSE = 0
MENTION = 1
CONSUMPTION = 2
UNRELATED = 3

# TODO : add Whitley and Mark's drug list into the drugs dictionary
# drugname, is_slang, is_commonly_abused
drugs = {
    'alprazolam': {
        'is_commonly_abused': True,
        'slang_terms': [
            'xanny', 'xannies'],
        'normal_terms': [
            'xanax', 'xan', 'xanex', 'niravam'],
        },
    'codeine': {
        'is_commonly_abused': True,
        'slang_terms': [],
        'normal_terms': [
            'codeine', 'codiene', 'cocet'],
        },
    'adderall': {
        'is_commonly_abused': True,
        'slang_terms': [
            'addy', 'addies', 'addys'],
        'normal_terms': [
            'adderall', 'aderall', 'adarall', 'addarall', 'adoral'],
        },
    'valium': {
        'is_commonly_abused': False,
        'slang_terms': [],
        'normal_terms': [
            'valium', 'vallium'],
        },
    'vyvanse': {
        'is_commonly_abused': True,
        'slang_terms': [],
        'normal_terms': [
            'vyvanse'],
        },
    'fentanyl': {
        'is_commonly_abused': True,
        'slang_terms': [],
        'normal_terms': [
            'fentanyl', 'fentynyl', 'fentenyl', 'fentanil', 'abstral',
            'actiq', 'fentora', 'onsolis', 'sublimaze', 'duragesic'],
        },
    'oxycodone': {
        'is_commonly_abused': True,
        'slang_terms': ['oxy'],
        'normal_terms': [
            'oxycodone', 'oxaydo', 'xtampza', 'oxycontin', 'oxycotin', 'oxycodin'],
        },
    'hydrocodone': {
        'is_commonly_abused': True,
        'slang_terms': [],
        'normal_terms': [
            'hydrocodone', 'hysingla', 'zohydro', 'vicodin', 'hycet',
            'lorcet', 'lortab', 'norco', 'verdrocet', 'xodol'],
        },
    'methadone': {
        'is_commonly_abused': False,
        'slang_terms': [],
        'normal_terms': [
            'methadone', 'dolophine', 'methadose'],
        },
    'morphine': {'is_commonly_abused': True,
                 'slang_terms': [],
                 'normal_terms': ['morphine', 'avinza', 'oramorph', 'roxanol', 'rms'],
                 },
    'diazepam': {'is_commonly_abused': True,
                 'slang_terms': [],
                 'normal_terms': ['diazepam', 'valium'],
                 },
    'tramadol': {'is_commonly_abused': False,
                 'slang_terms': [],
                 'normal_terms': ['tramadol', 'ultram'],
                 },
    'quetiapine': {'is_commonly_abused': False,
                   'slang_terms': [],
                   'normal_terms': ['quetiapine', 'seroquel'],
                   },
    'lorazepam': {'is_commonly_abused': False,
                  'slang_terms': [],
                  'normal_terms': ['lorazepam', 'ativan'],
                  },
    'clonazepam': {'is_commonly_abused': True,
                   'slang_terms': [],
                   'normal_terms': ['clonazepam', 'klonopin'],
                   },
    'percocet': {'is_commonly_abused': True,
                 'slang_terms': ['percs', 'perc'],
                 'normal_terms': ['percocet', 'percacet', 'percicet'],
                 },
    'aripiprazole': {'is_commonly_abused': False,
                     'slang_terms': [],
                     'normal_terms': ['aripiprazole', 'abilify'],
                     },
    'buprenorphine': {'is_commonly_abused': False,
                      'slang_terms': [],
                      'normal_terms': ['buprenorphine', 'suboxone', 'naloxone', 'bunavail', 'zubsolv'],
                      },
    'olanzapine': {'is_commonly_abused': False,
                   'slang_terms': [],
                   'normal_terms': ['olanzapine', 'zyprexa', 'zydis'],
                   },
    'methylphenidate': {'is_commonly_abused': True,
                        'slang_terms': [],
                        'normal_terms': ['methylphenidate', 'aptensio', 'concerta', 'cotempla', 'metadate',
                                         'methylin', 'quillichew', 'quillivant', 'ritalin'],
                        },
    'risperidone': {'is_commonly_abused': False,
                    'slang_terms': [],
                    'normal_terms': ['risperidone ', 'risperdal'],
                    },
    'caffeine': {'is_commonly_abused': False,
                 'slang_terms': [],
                 'normal_terms': ['caffeine', 'caffiene', 'coffee'],
                 },
    'amphetamine': {'is_commonly_abused': False,
                    'slang_terms': [],
                    'normal_terms': ['amphetamine', 'adzenys', 'dyanavel'],
                    },
    'hydromorphone': {'is_commonly_abused': False,
                      'slang_terms': [],
                      'normal_terms': ['hydromorphone', 'dilaudid', 'exalgo', 'hydrostat'],
                      },
    }

verbs_slang = {'snort', 'crush', 'inject', 'pop', 'rail', 'sniff', 'trip', 'chug'
                                                                           'spill', 'binge', 'sling', 'slang',
               'snortin'}

# generate dict that maps terms to keys and values includ parent term, is_slang, is_commonly_abused
drug_term_LUT = {}

for parent_term, subdict in drugs.items():
    for slang_term in subdict['slang_terms']:
        drug_term_LUT[slang_term] = {
            'parent_term': parent_term,
            'is_slang': True,
            'is_commonly_abused': subdict['is_commonly_abused']
            }
    for normal_term in subdict['normal_terms']:
        drug_term_LUT[normal_term] = {
            'parent_term': parent_term,
            'is_slang': False,
            'is_commonly_abused': subdict['is_commonly_abused']
            }

drug_entity_pipe = Entity(keywords_list=list(drug_term_LUT.keys()), label='DRUG')
nlp.add_pipe(drug_entity_pipe, before='ner')

has_drug_term = lambda doc: any([True for ent in doc.ents if ent.label_ == 'DRUG'])
has_slang_drug_term = lambda doc: any([ent._.get('is_slang') for ent in doc.ents if ent.label_ == 'DRUG'])
has_commonly_abused_drug_term = lambda doc: any(
    [ent._.get('is_commonly_abused') for ent in doc.ents if ent.label_ == 'DRUG'])


@preprocessor(memoize=True)
def nlpify(x):
    # preprocessor gets the series obj, so extract string
    doc = nlp(x['text'])
    Span.set_extension('is_commonly_abused', default=False, force=True)
    Span.set_extension('is_slang', default=False, force=True)
    for ent in doc.ents:
        if ent.label_ == 'DRUG':
            ent._.set('is_commonly_abused', drug_term_LUT[ent.text.lower()]['is_commonly_abused'])
            ent._.set('is_slang', drug_term_LUT[ent.text.lower()]['is_slang'])
            # for token in ent:
            #   token._.set('is_commonly_abused', drug_term_LUT[ent.text]['is_commonly_abused'])
            #   token._.set('is_slang', drug_term_LUT[ent.text]['is_slang'])
    Doc.set_extension('has_drug_term', getter=has_drug_term, force=True)
    Doc.set_extension('has_commonly_abused_drug_term', getter=has_commonly_abused_drug_term, force=True)
    Doc.set_extension('has_slang_drug_term', getter=has_slang_drug_term, force=True)
    return doc


@labeling_function(pre=[nlpify])
def drug_with_slang_usage(doc):
    '''check if drug name in text and mention of abusive use'''
    if doc._.has_drug_term:
        for ent in doc.ents:
            if ent.label_ == 'DRUG':
                head = [t for t in ent][0].head  # get head of the drug entity
                if head.pos_ == 'VERB' and head.lemma_ in verbs_slang:
                    return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def no_drugnames_found(doc):
    '''Check if no drugnames were found'''
    if not doc._.has_drug_term:
        return UNRELATED
    return ABSTAIN


@labeling_function(pre=[nlpify])
def slang_drug_with_usage(doc):
    '''check if a commonly abused drugname and there's a verb associated with it'''
    if doc._.has_slang_drug_term:
        for ent in doc.ents:
            if ent.label_ == 'DRUG' and ent._.is_slang:
                head = [t for t in ent][0].head  # get head of the drug entity
                if head.pos_ == 'VERB':
                    return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def normal_drug_with_usage(doc):
    '''check if a normal drugname and there's a non-slang verb associated with it'''
    if doc._.has_drug_term:
        for ent in doc.ents:
            if ent.label_ == 'DRUG' and not ent._.is_slang:
                head = [t for t in ent][0].head  # get head of the drug entity
                if head.pos_ == 'VERB' and head.lemma_ not in verbs_slang:
                    return CONSUMPTION
    return ABSTAIN


@labeling_function(pre=[nlpify])
def slang_side_effects(doc):
    '''Drug mentioned and slang mention of a side effect'''
    effect_regexes = [
        'fuck(ed)? (me )?up',
        'fuck(ed)? with'
        'lit(ty)?',
        'high',
        'od', 'oveerdose(d)?',
        'addict(ed|ing)?',
        'hooked',
        'habit',
        'mellow',
        'doped',
        'hallucinat(e)?(d|ing)?',
        'trip(ping)?',
        'rollin(g)?',
        'buzz(ed)?'
        ]
    if doc._.has_drug_term and re.search('|'.join(effect_regexes), doc.text.lower()):
        return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def drug_with_no_usage(doc):
    '''Drug mentioned but not in the context of being used'''
    if doc._.has_drug_term:
        for ent in doc.ents:
            if ent.label_ == 'DRUG':
                head = [t for t in ent][0].head  # get head of the drug entity
                if head.pos_ == 'VERB':
                    return ABSTAIN
    return MENTION


@labeling_function(pre=[nlpify])
def clinical_terms(doc):
    '''Drug mentioned but with cclinical terms around it'''
    medical_terms = {
        'doctor', 'nurse'  # TODO : add more medicl terms that indicate typical usage
        }
    medical_regex = r'(doctor|nurse|(re(- )?)?admi(t|ssion)(s)?|hospital)'
    if doc._.has_drug_term and medical_terms.intersection(set([t for t in doc])):
        return CONSUMPTION
    return ABSTAIN


@labeling_function(pre=[nlpify])
def abusive_activities(doc):
    ''' drug usage mentioned for the purposes of unintended use '''
    activities = {
        'adderall': ['clean', 'study'],
        'vyvanse': ['study']
        }
    if doc._.has_drug_term:
        for ent in [ent for ent in doc.ents if ent.label_ == 'DRUG']:
            drug = drug_term_LUT.get(ent.text.lower())
            if drug:
                drug_activities = activities.get(drug['parent_term'])
                if drug_activities:
                    for token in doc:
                        if token.lemma_ in drug_activities:
                            return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def study_aid(doc):
    ''' drugs being useed speccifically as study aid '''
    if doc._.has_drug_term:
        study_aid_drugs = {'adderall', 'vyvanse'}
        drugs = set([drug_term_LUT.get(ent.label_.lower()) for ent in doc.ents if ent.label_ == 'DRUG'])
        if drugs.intersection(study_aid_drugs):
            study_regex = r'(wak(e|ing)|study(ing)?|homework|school(s)?|libar(y|ies)|education|class(es)?|semester(' \
                          r's)?|exam(s)?|paper(s)?|campus|essay(s)?|college|uni(versity)?)'
            if re.search(study_regex, doc.text.lower()):
                return abuse
    return ABSTAIN


@labeling_function(pre=[nlpify])
def soliciting_drug(doc):
    '''Check if there is a regex pattern indicating the persom asking for drug'''
    if doc._.has_drug_term:
        regex = "(any ?one|someone|any ?body|who|y'all|I|gonna).*(" \
                "steal|stole|get|got|has|had|have|holding|find|found|need(ed)?|want|share).*"
        if re.search(regex, doc.text.lower()):
            return ABUSE
        other_soliciting_terms = {'hmu', }
        if other_soliciting_terms.intersection(set([token.text.lower() for token in doc])):
            return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def suspicious_emojis(doc):
    '''drug mentioned and has emojis commonly used when mentioning abuse'''
    suspicious_emojis = {'💊', '🍁', '🍀', '🌴', '🌳', '🌲', '💨'
                                                             '❄', '⛄', '🔑', '🌨', '🍚', '🤧', '🎱',
                         '💉', '🎯', '🐉', '🍄', }  # TODO add more suspicious emojis
    if doc._.has_drug_term and suspicious_emojis.intersection(set([t for t in doc])):
        return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def expected_usage(doc):
    '''check for each drug mentioned whether theres a mention of a term commonly associated with expected usage'''
    usage = {
        'seroquel': {'sleep', 'insomnia'},  # TODO : add more common drug usage matches
        'xanax': {'anxiety'},
        }
    if doc._.has_drug_term:
        token_set = set([t for t in doc])
        for ent in doc.ents:
            if ent.label_ == 'DRUG':
                if usage.get(ent.text.lower(), set()).intersection(token_set):
                    return CONSUMPTION
    return ABSTAIN


@labeling_function(pre=[nlpify])
def lyrica_as_nondrug(doc):
    if 'lyrica' in doc.text.lower() and re.search('(anderson|lhhh|song|ginny|breisha|lgbt(q)?)', doc.text.lower()):
        return UNRELATED

    with nlp.disable_pipes('entity'):
        w_doc = nlp(doc.text)
        lyrica_person = False
        for ent in w_doc.ents:
            if 'lyrica' in ent.text.lower() and ent.label_ == 'PERSON':
                lyrica_person = True
        if lyrica_person:
            found_other_drug_term = False
            for ent in doc.ents:
                if 'lyrica' not in ent.text.lower() and ent.label_ == 'DRUG':
                    found_other_drug_term = True
            if not found_other_drug_term:
                return UNRELATED

    textlist = doc.text.replace('_U', '').lower().split()
    if 'lyrica' in textlist:
        if len(textlist) < 5:
            return UNRELATED
        else:
            for ent in doc.ents:
                if 'lyrica' in ent.text.lower() and ent.label_ != 'DRUG':
                    return UNRELATED
    return ABSTAIN


@labeling_function(pre=[nlpify])
def buy_or_sell(doc):
    if doc._.has_drug_term:
        lemmas = set([token.lemma_ for token in doc])
        if 'buy' or 'sell' in lemmas:
            return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def short_tweet(doc):
    if doc._.has_drug_term and len(doc.text.split()) <= 5:
        return MENTION
    return ABSTAIN


@labeling_function(pre=[nlpify])
def chill_pill(doc):
    '''someone tells another person to take some drug to calm down'''
    if doc._.has_drug_term:
        found_drugs = set([ent.text.lower() for ent in doc.ents if ent.label_ == 'DRUG'])
        if found_drugs:
            chill_regex = "take (a|some)[a-z _-]{0,10}(" + '|'.join(found_drugs) + ')'
            if re.search(chill_regex, doc.text.lower()):
                return MENTION
    return ABSTAIN


@labeling_function(pre=[nlpify])
def drugs_for_sleep(doc):
    ''' mentions of drugs used to help sleep '''
    if doc._.has_drug_term and re.search(r"(sleep(ing)?|(good[ ]?)?night)", doc.text.lower()):
        return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def drug_feels_like(doc):
    '''someone mentioning one drug is like something else : ampetemine is like adderall'''
    if doc._.has_drug_term and re.search(r"(is|it(\')?s)[ ,a-z0-9]{,8}(like|similar)", doc.text.lower()):
        return MENTION
    return ABSTAIN


## TODO RULES

# anything + alchcohol
# anyhtin + energy drink

# check for drugs that are mentioned in the hashtag, e.g. #aderrall (not captured by nlp?)

@labeling_function(pre=[nlpify])
def mixing_drugs(doc):
    '''mention of mixing drugs often used in abuse'''
    # map to all alias terms
    abuse_pairs = [
        ('ambien', 'percocet'),
        ('adderall', 'alcohol'),
        ('adderall', 'coffee'),
        ]
    if doc._.has_drug_term:
        pdrugs = [drug_term_LUT.get(ent.text.lower(), {}).get('parent_term') for ent in doc.ents if
                  ent.label_ == 'DRUG']
        drugset = set([drug for drug in pdrugs if drug])
        if len(drugset) >= 2:
            drug_pairs = itertools.combinations(drugset, 2)
            for pair in drug_pairs:
                if pair in abuse_pairs:
                    return ABUSE
    return ABSTAIN


@labeling_function(pre=[nlpify])
def person_on_rx(doc):
    ''' mention where person indicates the drug is and rx'''
    if doc._.has_drug_term and not doc._.has_slang_drug_term:
        if re.search('(got|have)[ ]+(me|him|her|my) (on|taking|using)', doc.text.lower()):
            return CONSUMPTION
    return ABSTAIN


@labeling_function(pre=[nlpify])
def drug_had_me(doc):
    ''' adderall had me ..., indicating side effect of normal use'''
    if doc._.has_drug_term:
        for ent in [ent for ent in doc.ents if ent.label_ == 'DRUG']:
            if drug_term_LUT.get(ent.text, {}).get('parent_term') in {'adderall', 'vyvanse'}:
                idx = doc.text.index(ent.text)
                if re.search('^[ ]*(have|has|had|got) (me|her|him|them)', doc.text.lower()[idx + len(ent.text):]):
                    return CONSUMPTION
    return ABSTAIN


lfs = [drug_with_slang_usage,
       no_drugnames_found,
       slang_drug_with_usage,
       normal_drug_with_usage,
       slang_side_effects,
       drug_with_no_usage,
       clinical_terms,
       abusive_activities,
       study_aid,
       soliciting_drug,
       suspicious_emojis,
       expected_usage,
       lyrica_as_nondrug,
       buy_or_sell,
       short_tweet,
       chill_pill,
       drugs_for_sleep,
       drug_feels_like,
       mixing_drugs,
       person_on_rx,
       drug_had_me
       ]

applier = PandasLFApplier(lfs)
L_train = applier.apply(df_train, progress_bar=False)

L_val = applier.apply(df_val, progress_bar=False)

class2label = {'a': 0, 'm': 1, 'c': 2, 'u': 3}
Y = df_labels['class'].map(lambda x: class2label[x]).to_numpy()

Y_val = df_val_labels['class'].map(lambda x: class2label[x]).to_numpy()

summary_analysis = LFAnalysis(L_train, lfs).lf_summary(Y)
summary_analysis

label_model = LabelModel(cardinality=4, verbose=True)
label_model.fit(L_train, n_epochs=500, log_freq=50, seed=123)  # , class_balance=[.15, .5, .3, .05]);
df_train["label"] = label_model.predict(L=L_train, tie_break_policy="abstain")
df_val["label"] = label_model.predict(L=L_val, tie_break_policy="abstain")

weights = summary_analysis[['j']]
weights['w'] = [round(w, 3) for w in label_model.get_weights()]
weights

df_train['groundtruth'] = df_labels['class']
df_train['predicted_class'] = df_train['label'].map({-1: None, 0: 'a', 1: 'm', 2: 'c', 3: 'u'})
df_train['correct?'] = df_train['groundtruth'] == df_train['predicted_class']

df_val['groundtruth'] = df_val_labels['class']
df_val['predicted_class'] = df_val['label'].map({-1: None, 0: 'a', 1: 'm', 2: 'c', 3: 'u'})
df_val['correct?'] = df_val['groundtruth'] == df_val['predicted_class']

acc_train = label_model.score(L=L_train, Y=Y, tie_break_policy="abstain",
                              metrics=["f1_macro", "f1_micro", "accuracy"])
print('\nTraining Data Performance')
print(f"{'Model F1 Macro':<25} {acc_train['f1_macro'] * 100:.1f}%")
print(f"{'Model F1 Micro:':<25} {acc_train['f1_micro'] * 100:.1f}%")

acc_val = label_model.score(L=L_val, Y=Y_val, tie_break_policy="abstain",
                            metrics=["f1_macro", "f1_micro", "accuracy"])
print('\n\nValidation Data Performance')
print(f"{'Model F1 Macro':<25} {acc_val['f1_macro'] * 100:.1f}%")
print(f"{'Model F1 Micro:':<25} {acc_val['f1_micro'] * 100:.1f}%")

labels_ = ['a', 'c', 'm', 'u']
cmat = confusion_matrix(df_train['groundtruth'][~pd.isnull(df_train['predicted_class'])],
                        df_train['predicted_class'][~pd.isnull(df_train['predicted_class'])],
                        labels=labels_)
df_cmat = pd.DataFrame(cmat.T, labels_, labels_)
sn.set(font_scale=1)  # for label size
sn.heatmap(df_cmat, annot=True, annot_kws={"size": 10}, fmt='d', cbar=False,
           cmap='RdBu', center=0, square=True)  # font size

plt.show()

cmat = confusion_matrix(df_val['groundtruth'][~pd.isnull(df_val['predicted_class'])],
                        df_val['predicted_class'][~pd.isnull(df_val['predicted_class'])],
                        labels=labels_)
df_cmat = pd.DataFrame(cmat.T, labels_, labels_)
sn.set(font_scale=1)  # for label size
sn.heatmap(df_cmat, annot=True, annot_kws={"size": 10}, fmt='d', cbar=False,
           cmap='RdBu', center=0, square=True)  # font size

plt.show()

df_train.groupby('groundtruth')['text'].count()

df_train.groupby('predicted_class')['text'].count()

drugs = {
    'acetaminophen',
    'hydrocodone',
    'codeine',
    'chlorpheniramine',
    'morphine',
    'buprenorphine',
    'hydromorphone',
    'butorphanol',
    'ipratropium',
    'fentanyl',
    'oxycodone',
    'methadone',
    'tramadol',
    'aspirin',
    'guaifenesin',
    'caffeine',
    'nalbuphine',
    'homatropine',
    'remifentanil',
    'sufentanil',
    'naloxone',
    'meperidine',
    'dihydrocodeine',
    'oxymorphone',
    'ibuprofen',
    'phenylephrine',
    'brompheniramine',
    'pseudoephedrine',
    'pentazocine',
    'butalbital',
    'carisoprodol',
    'promethazine',
    'levorphanol',
    'vicodin',
    'anexsia',
    'lorcet',
    'taxadone',
    'reprexain',
    'dolacet',
    'xylon',
    'cocet',
    'tussicaps',
    'kadian',
    'subutex',
    'dilaudid',
    'torbugesic',
    'atrovent',
    'xodol',
    'duragesic',
    'norco',
    'percocet',
    'endocet',
    'lynox',
    'oramorph',
    'dolophine',
    'dazidox',
    'physeptone',
    'ultram',
    'roxanol',
    'duocet',
    'oxynorm',
    'actiq',
    'lortab',
    'nubain',
    'ryzolt',
    'perloxx',
    'morphabond',
    'zydol',
    'sevredol',
    'roxicodone',
    'hydrotropine',
    'hydromide',
    'astramorph',
    'ultiva',
    'sufenta',
    'ionsys',
    'tramake',
    'oxycontin',
    'percodan',
    'tylenol',
    'suboxone',
    'zamadol',
    'trezix',
    'verdrocet',
    'oncet',
    'glydeine',
    'procet',
    'demerol',
    'roxicet',
    'stadol',
    'roxilox',
    'endodan',
    'maxidone',
    'zerlor',
    'synalgos-dc',
    'combunox',
    'panlor',
    'butorphic',
    'tuzistra',
    'methadose',
    'tylagesic',
    'zomorph',
    'opana',
    'depodur',
    'ibudone',
    'pethilorfan',
    'vanacet',
    'hyco-pap',
    'aceon',
    'hycodan',
    'hydrogesic',
    'primlev',
    'zydone',
    'co-gesic',
    'phenco-care',
    'tussionex',
    'sublimaze',
    'msir',
    'm-eslon',
    'hydropane',
    'magnacet',
    'onsolis',
    'vendone',
    'eth-oxydose',
    'hydromet',
    'm-oxy',
    'pyregesic',
    'oxecta',
    'm-phen',
    'vidone',
    'margesic-h',
    'codrix',
    'hy-phen',
    'tussigon',
    'zamicet',
    'ascomp',
    'rms',
    'oxyrapid',
    'duramorph',
    'hycomed',
    'endocodone',
    'guai-co',
    'conzip',
    'ugesic',
    'rybix',
    'stagesic',
    'zolvit',
    'brontex',
    'codafen',
    'oxydose',
    'vicoprofen',
    'ultracet',
    'panacet',
    'hycet',
    'zyfrel',
    'methex',
    'hydrostat',
    'duoneb',
    't-gesic',
    'cheratussin',
    'tramalgin',
    'percolone',
    'polygesic',
    'allay',
    'oxyfast',
    'buprenex',
    'dolagesic',
    'tylox',
    'oxaydo',
    'hydrocet',
    'talacen',
    'l-dromoran',
    'fentora',
    'alprazolam',
    'chlordiazepoxide',
    'clonazepam',
    'diazepam',
    'estazolam',
    'flurazepam',
    'lorazepam',
    'oxazepam',
    'temazepam',
    'triazolam',
    'clobazam',
    'clorazepate',
    'quazepam',
    'calprazolam',
    'niravam',
    'xanax',
    'chlordinium',
    'clindex',
    'h-tran',
    'librax',
    'libritabs',
    'librium',
    'limbitrol',
    'mitran',
    'poxi',
    'tropium',
    'ceberclon',
    'klonopin',
    'rivotril',
    'valpax',
    'alupram',
    'atensine',
    'd-val',
    'dialar',
    'diastat',
    'diazemuls',
    'dizac',
    'evacalm',
    'rimapam',
    'stesolid',
    'tensium',
    'valicot',
    'valium',
    'zetran',
    'prosom',
    'dalmane',
    'almazine',
    'ativan',
    'serax',
    'restoril',
    'halcion',
    'frisium',
    'onfi',
    'gen-xene',
    'tranxene',
    'doral',
    'asenapine',
    'clozapine',
    'risperidone',
    'aripiprazole',
    'brexpiprazole',
    'cariprazine',
    'iloperidone',
    'lurasidone',
    'olanzapine',
    'paliperidone',
    'pimavanserin',
    'quetiapine',
    'ziprasidone',
    'saphris',
    'clozaril',
    'fazaclo',
    'versacloz',
    'risperdal',
    'abilify',
    'aristada',
    'rexulti',
    'vraylar',
    'fanapt',
    'latuda',
    'symbyax',
    'zyprexa',
    'invega',
    'nuplazid',
    'seroquel',
    'geodon',
    'amphetamine',
    'dextroamphetamine',
    'doxapram',
    'lisdexamfetamine',
    'methamphetamine',
    'methylphenidate',
    'tropicamide',
    'armodafinil',
    'dexmethylphenidate',
    'modafinil',
    'p-hydroxyamphetamine',
    'adderall',
    'adderall-xr',
    'evekeo',
    'mydayis',
    'dexedrine',
    'dextrostat',
    'durophet',
    'liquadd',
    'procentra',
    'zenzedi',
    'dopram',
    'respiram',
    'vyvanse',
    'desoxyn',
    'aptensio',
    'concerta',
    'metadate',
    'methylin',
    'quillivant',
    'ritalin',
    'ritalin-sr',
    'paremyd',
    'nuvigil',
    'focalin',
    'aller-tec',
    'provigil',
    }

drug_rex = "(" + '|'.format(drugs) + ")"

df_drugs = df_train[df_train.text.map(lambda x: re.search(drug_rex, x.lower()) is not None)]

for d in drugs:
    df_drugs[d] = df_train.text.map(lambda x: 1 if d in x.lower() else 0)

df_drug_mentions = df_drugs.drop(columns=['text'])  # , 'label', 'groundtruth', 'predicted_class', 'correct?'])

df_drug_mentions_sum = df_drug_mentions.sum().sort_values(ascending=False)

df_drug_mentions_sum[df_drug_mentions_sum > 5]
